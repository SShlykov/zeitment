syntax = "proto3";

package user_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/SShlykov/zeitment/auth/internal/infrastructure/grpc/proto/user_v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Пользовательский модуль"
    version: "0.0.1"
    description: "Модуль реализующий работу с пользователями"
    license: {
      name: "FSF"
      url: "..."
    }
    contact: {
      name: "Sergey Shlykov"
      email: "zeitment@gmail.com"
    };
  };

  base_path: "/api/v1/auth/user"

  host: "localhost:8080",
  schemes: HTTP,
  schemes: HTTPS,
  consumes: "application/json",
  produces: "application/json",
};


// Сервис работы с пользователем
service UserService {
  // Поиск пользователей
  rpc Find(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      post: "/find",
      body: "*"
    };
  };

  // Получить пользователя
  rpc Get(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/get/{id}"
    };
  };

  // Обновить пользователя
  rpc Update(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      put: "/update/{id}"
      body: "*"
    };
  };

  // Удалить пользователя
  rpc Delete(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/delete/{id}"
    };
  };
}

//------------------------------------------------------------------------------------------------------------------
//  User
//------------------------------------------------------------------------------------------------------------------

message User {
  // Идентификатор пользователя
  string id = 1;
  // Дата создания
  google.protobuf.Timestamp created_at = 2;
  // Дата обновления
  google.protobuf.Timestamp updated_at = 3;
  // Дата удаления | null - не удален
  google.protobuf.Timestamp deleted_at = 4;
  // Дата последнего входа | null - не входил
  google.protobuf.Timestamp logged_at = 5;
  // Дата подтверждения почты | null - не подтвержден
  google.protobuf.Timestamp confirmed_at = 6;

  // Логин пользователя | min_len: 6, max_len: 100
  string login = 7 [(validate.rules).string = { min_len: 6, max_len: 100 }];
  // Почта пользователя | null - не указана
  google.protobuf.StringValue email = 8;

  // Кем удален | null - не удален
  google.protobuf.StringValue deleted_by = 9;
  // Особая метка доступа для связи с другими сервисами
  google.protobuf.Int32Value access_template_id = 10;
  // Период через который нужно обновить пароль пользователя
  google.protobuf.Int64Value update_after = 11;
}

//------------------------------------------------------------------------------------------------------------------
//  ListUsers operations
//------------------------------------------------------------------------------------------------------------------

// Запрос на поиск пользователей
message ListUsersRequest {
  // Опции поиска пользователей; пагинация
  GetOptions options = 1;
}

// Ответ на поиск пользователей
message ListUsersResponse {
  // Статус операции
  Status status = 1;
  // Список пользователей
  repeated User users = 2;
  // Метаданные пагинации
  PaginationMetadata pagination_metadata = 3;
}

//------------------------------------------------------------------------------------------------------------------
//  Get User operations
//------------------------------------------------------------------------------------------------------------------

// Получить пользователя
message GetUserRequest {
  // Идентификатор пользователя
  string id = 1;
}

// Ответ на получение пользователя
message GetUserResponse {
  // Идентификатор пользователя
  string id = 1;
  Status status = 2;
  User user = 3;
}

//------------------------------------------------------------------------------------------------------------------
//  Update User operations
//------------------------------------------------------------------------------------------------------------------

// Обновить пользователя
message UpdateUserRequest {
  // Идентификатор пользователя
  string id = 1;
  // Структура пользователя (обновленная)
  User user = 2;
}

// Ответ на обновление пользователя
message UpdateUserResponse {
  // Идентификатор пользователя
  string id = 1;
  // Статус операции
  Status status = 2;
  // Обновленный пользователь
  User user = 3;
}

//------------------------------------------------------------------------------------------------------------------
//  Delete User operations
//------------------------------------------------------------------------------------------------------------------

// Удалить пользователя
message DeleteUserRequest {
  // Идентификатор пользователя
  string id = 1;
}


//------------------------------------------------------------------------------------------------------------------
//  Вспомогательные структуры
//------------------------------------------------------------------------------------------------------------------

// Статус операции
message Status {
  // Статус операции
  string status = 1;
  // Сообщение об ошибке
  string message = 2;
}

// Опции поиска
message GetOptions {
  // Пагинация
  Pagination pagination = 1;
}

// Метаданные пагинации (для ответа)
message PaginationMetadata {
  // Номер страницы
  uint64 page = 1;
  // Размер страницы
  uint64 page_size = 2;
  // Общее количество элементов
  uint64 total = 3;
  // Общее количество страниц
  uint64 total_pages = 4;
}

// Пагинация (для запроса)
message Pagination {
  // Номер страницы
  uint64 page = 1;
  // Размер страницы
  uint64 page_size = 2;
}

// Фильтры
message Filter {
  // Поле для фильтрации (название поля)
  string field = 1;
  // Значение для фильтрации
  string value = 2;
  // Оператор фильтрации (equal, not_equal, greater_than, greater_than_or_equal, less_than, less_than_or_equal,
  // like, not_like, in, not_in, is_null, is_not_null)
  Operator operator = 3;
}

enum Operator {
  EQUAL = 0;
  NOT_EQUAL = 1;
  GREATER_THAN = 2;
  GREATER_THAN_OR_EQUAL = 3;
  LESS_THAN = 4;
  LESS_THAN_OR_EQUAL = 5;
  LIKE = 6;
  NOT_LIKE = 7;
  IN = 8;
  NOT_IN = 9;
  IS_NULL = 10;
  IS_NOT_NULL = 11;
}