// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/postgres/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/postgres/interface.go -destination=internal/mocks/interface.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/SShlykov/zeitment/bookback/pkg/postgres"
	v5 "github.com/jackc/pgx/v5"
	pgconn "github.com/jackc/pgx/v5/pgconn"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// DB mocks base method.
func (m *MockClient) DB() db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockClientMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockClient)(nil).DB))
}

// QueryRowContext mocks base method.
func (m *MockClient) QueryRowContext(ctx context.Context, query string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "QueryRowContext", varargs...)
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockClientMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockClient)(nil).QueryRowContext), varargs...)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockDB) BeginTx(ctx context.Context, options v5.TxOptions) (v5.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(v5.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBMockRecorder) BeginTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDB)(nil).BeginTx), ctx, options)
}

// Close mocks base method.
func (m *MockDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockDB) ExecContext(ctx context.Context, query db.Query, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDBMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDB)(nil).ExecContext), varargs...)
}

// Ping mocks base method.
func (m *MockDB) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDB)(nil).Ping), ctx)
}

// QueryContext mocks base method.
func (m *MockDB) QueryContext(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDBMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDB)(nil).QueryContext), varargs...)
}

// QueryRawContextMulti mocks base method.
func (m *MockDB) QueryRawContextMulti(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRawContextMulti", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRawContextMulti indicates an expected call of QueryRawContextMulti.
func (mr *MockDBMockRecorder) QueryRawContextMulti(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRawContextMulti", reflect.TypeOf((*MockDB)(nil).QueryRawContextMulti), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockDB) QueryRowContext(ctx context.Context, query db.Query, args ...any) v5.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(v5.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDBMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDB)(nil).QueryRowContext), varargs...)
}

// ScanAllContext mocks base method.
func (m *MockDB) ScanAllContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanAllContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanAllContext indicates an expected call of ScanAllContext.
func (mr *MockDBMockRecorder) ScanAllContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanAllContext", reflect.TypeOf((*MockDB)(nil).ScanAllContext), varargs...)
}

// ScanSingleContext mocks base method.
func (m *MockDB) ScanSingleContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanSingleContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanSingleContext indicates an expected call of ScanSingleContext.
func (mr *MockDBMockRecorder) ScanSingleContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanSingleContext", reflect.TypeOf((*MockDB)(nil).ScanSingleContext), varargs...)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// ReadCommitted mocks base method.
func (m *MockTxManager) ReadCommitted(ctx context.Context, handler db.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCommitted", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadCommitted indicates an expected call of ReadCommitted.
func (mr *MockTxManagerMockRecorder) ReadCommitted(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCommitted", reflect.TypeOf((*MockTxManager)(nil).ReadCommitted), ctx, handler)
}

// MockTransactor is a mock of Transactor interface.
type MockTransactor struct {
	ctrl     *gomock.Controller
	recorder *MockTransactorMockRecorder
}

// MockTransactorMockRecorder is the mock recorder for MockTransactor.
type MockTransactorMockRecorder struct {
	mock *MockTransactor
}

// NewMockTransactor creates a new mock instance.
func NewMockTransactor(ctrl *gomock.Controller) *MockTransactor {
	mock := &MockTransactor{ctrl: ctrl}
	mock.recorder = &MockTransactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactor) EXPECT() *MockTransactorMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockTransactor) BeginTx(ctx context.Context, options v5.TxOptions) (v5.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, options)
	ret0, _ := ret[0].(v5.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockTransactorMockRecorder) BeginTx(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockTransactor)(nil).BeginTx), ctx, options)
}

// MockSQLScanner is a mock of SQLScanner interface.
type MockSQLScanner struct {
	ctrl     *gomock.Controller
	recorder *MockSQLScannerMockRecorder
}

// MockSQLScannerMockRecorder is the mock recorder for MockSQLScanner.
type MockSQLScannerMockRecorder struct {
	mock *MockSQLScanner
}

// NewMockSQLScanner creates a new mock instance.
func NewMockSQLScanner(ctrl *gomock.Controller) *MockSQLScanner {
	mock := &MockSQLScanner{ctrl: ctrl}
	mock.recorder = &MockSQLScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLScanner) EXPECT() *MockSQLScannerMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockSQLScanner) ExecContext(ctx context.Context, query db.Query, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockSQLScannerMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockSQLScanner)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockSQLScanner) QueryContext(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockSQLScannerMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockSQLScanner)(nil).QueryContext), varargs...)
}

// QueryRawContextMulti mocks base method.
func (m *MockSQLScanner) QueryRawContextMulti(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRawContextMulti", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRawContextMulti indicates an expected call of QueryRawContextMulti.
func (mr *MockSQLScannerMockRecorder) QueryRawContextMulti(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRawContextMulti", reflect.TypeOf((*MockSQLScanner)(nil).QueryRawContextMulti), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockSQLScanner) QueryRowContext(ctx context.Context, query db.Query, args ...any) v5.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(v5.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockSQLScannerMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockSQLScanner)(nil).QueryRowContext), varargs...)
}

// ScanAllContext mocks base method.
func (m *MockSQLScanner) ScanAllContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanAllContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanAllContext indicates an expected call of ScanAllContext.
func (mr *MockSQLScannerMockRecorder) ScanAllContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanAllContext", reflect.TypeOf((*MockSQLScanner)(nil).ScanAllContext), varargs...)
}

// ScanSingleContext mocks base method.
func (m *MockSQLScanner) ScanSingleContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanSingleContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanSingleContext indicates an expected call of ScanSingleContext.
func (mr *MockSQLScannerMockRecorder) ScanSingleContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanSingleContext", reflect.TypeOf((*MockSQLScanner)(nil).ScanSingleContext), varargs...)
}

// MockContextScanner is a mock of ContextScanner interface.
type MockContextScanner struct {
	ctrl     *gomock.Controller
	recorder *MockContextScannerMockRecorder
}

// MockContextScannerMockRecorder is the mock recorder for MockContextScanner.
type MockContextScannerMockRecorder struct {
	mock *MockContextScanner
}

// NewMockContextScanner creates a new mock instance.
func NewMockContextScanner(ctrl *gomock.Controller) *MockContextScanner {
	mock := &MockContextScanner{ctrl: ctrl}
	mock.recorder = &MockContextScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextScanner) EXPECT() *MockContextScannerMockRecorder {
	return m.recorder
}

// ScanAllContext mocks base method.
func (m *MockContextScanner) ScanAllContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanAllContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanAllContext indicates an expected call of ScanAllContext.
func (mr *MockContextScannerMockRecorder) ScanAllContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanAllContext", reflect.TypeOf((*MockContextScanner)(nil).ScanAllContext), varargs...)
}

// ScanSingleContext mocks base method.
func (m *MockContextScanner) ScanSingleContext(ctx context.Context, query db.Query, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanSingleContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanSingleContext indicates an expected call of ScanSingleContext.
func (mr *MockContextScannerMockRecorder) ScanSingleContext(ctx, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanSingleContext", reflect.TypeOf((*MockContextScanner)(nil).ScanSingleContext), varargs...)
}

// MockQueryScanner is a mock of QueryScanner interface.
type MockQueryScanner struct {
	ctrl     *gomock.Controller
	recorder *MockQueryScannerMockRecorder
}

// MockQueryScannerMockRecorder is the mock recorder for MockQueryScanner.
type MockQueryScannerMockRecorder struct {
	mock *MockQueryScanner
}

// NewMockQueryScanner creates a new mock instance.
func NewMockQueryScanner(ctrl *gomock.Controller) *MockQueryScanner {
	mock := &MockQueryScanner{ctrl: ctrl}
	mock.recorder = &MockQueryScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryScanner) EXPECT() *MockQueryScannerMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MockQueryScanner) ExecContext(ctx context.Context, query db.Query, args ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockQueryScannerMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockQueryScanner)(nil).ExecContext), varargs...)
}

// QueryContext mocks base method.
func (m *MockQueryScanner) QueryContext(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockQueryScannerMockRecorder) QueryContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockQueryScanner)(nil).QueryContext), varargs...)
}

// QueryRawContextMulti mocks base method.
func (m *MockQueryScanner) QueryRawContextMulti(ctx context.Context, query db.Query, args ...any) (v5.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRawContextMulti", varargs...)
	ret0, _ := ret[0].(v5.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRawContextMulti indicates an expected call of QueryRawContextMulti.
func (mr *MockQueryScannerMockRecorder) QueryRawContextMulti(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRawContextMulti", reflect.TypeOf((*MockQueryScanner)(nil).QueryRawContextMulti), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockQueryScanner) QueryRowContext(ctx context.Context, query db.Query, args ...any) v5.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(v5.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockQueryScannerMockRecorder) QueryRowContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockQueryScanner)(nil).QueryRowContext), varargs...)
}

// MockPingRunner is a mock of PingRunner interface.
type MockPingRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPingRunnerMockRecorder
}

// MockPingRunnerMockRecorder is the mock recorder for MockPingRunner.
type MockPingRunnerMockRecorder struct {
	mock *MockPingRunner
}

// NewMockPingRunner creates a new mock instance.
func NewMockPingRunner(ctrl *gomock.Controller) *MockPingRunner {
	mock := &MockPingRunner{ctrl: ctrl}
	mock.recorder = &MockPingRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingRunner) EXPECT() *MockPingRunnerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingRunner) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingRunnerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingRunner)(nil).Ping), ctx)
}
