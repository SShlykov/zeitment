// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/repository/pgrepo (interfaces: BookEventsRepo)
//
// Generated by this command:
//
//	mockgen -destination=../../../../tests/mocks/domain/repository/pgrepo/book_events_repo_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/repository/pgrepo BookEventsRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"github.com/SShlykov/zeitment/postgres/dbutils"
	reflect "reflect"

	entity "github.com/SShlykov/zeitment/bookback/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockBookEventsRepo is a mock of BookEventsRepo interface.
type MockBookEventsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBookEventsRepoMockRecorder
}

// MockBookEventsRepoMockRecorder is the mock recorder for MockBookEventsRepo.
type MockBookEventsRepoMockRecorder struct {
	mock *MockBookEventsRepo
}

// NewMockBookEventsRepo creates a new mock instance.
func NewMockBookEventsRepo(ctrl *gomock.Controller) *MockBookEventsRepo {
	mock := &MockBookEventsRepo{ctrl: ctrl}
	mock.recorder = &MockBookEventsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookEventsRepo) EXPECT() *MockBookEventsRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookEventsRepo) Create(arg0 context.Context, arg1 *entity.BookEvent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookEventsRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookEventsRepo)(nil).Create), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockBookEventsRepo) FindByID(arg0 context.Context, arg1 string) (*entity.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockBookEventsRepoMockRecorder) FindByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBookEventsRepo)(nil).FindByID), arg0, arg1)
}

// FindByKV mocks base method.
func (m *MockBookEventsRepo) FindByKV(arg0 context.Context, arg1 dbutils.QueryOptions) ([]*entity.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKV", arg0, arg1)
	ret0, _ := ret[0].([]*entity.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKV indicates an expected call of FindByKV.
func (mr *MockBookEventsRepoMockRecorder) FindByKV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKV", reflect.TypeOf((*MockBookEventsRepo)(nil).FindByKV), arg0, arg1)
}

// HardDelete mocks base method.
func (m *MockBookEventsRepo) HardDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDelete indicates an expected call of HardDelete.
func (mr *MockBookEventsRepoMockRecorder) HardDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDelete", reflect.TypeOf((*MockBookEventsRepo)(nil).HardDelete), arg0, arg1)
}

// List mocks base method.
func (m *MockBookEventsRepo) List(arg0 context.Context, arg1 dbutils.Pagination) ([]*entity.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*entity.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBookEventsRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookEventsRepo)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockBookEventsRepo) Update(arg0 context.Context, arg1 string, arg2 *entity.BookEvent) (*entity.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookEventsRepoMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookEventsRepo)(nil).Update), arg0, arg1, arg2)
}
