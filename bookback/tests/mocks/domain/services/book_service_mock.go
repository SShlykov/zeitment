// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/services (interfaces: BookService)
//
// Generated by this command:
//
//	mockgen -destination=../../../tests/mocks/domain/services/book_service_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/services BookService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookService) CreateBook(arg0 context.Context, arg1 models.CreateBookRequest) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceMockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookService)(nil).CreateBook), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockBookService) DeleteBook(arg0 context.Context, arg1 string) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockBookServiceMockRecorder) DeleteBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookService)(nil).DeleteBook), arg0, arg1)
}

// GetBookByID mocks base method.
func (m *MockBookService) GetBookByID(arg0 context.Context, arg1 string) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockBookServiceMockRecorder) GetBookByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockBookService)(nil).GetBookByID), arg0, arg1)
}

// GetTableOfContentsByBookID mocks base method.
func (m *MockBookService) GetTableOfContentsByBookID(arg0 context.Context, arg1 models.RequestTOC) (*models.TableOfContents, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableOfContentsByBookID", arg0, arg1)
	ret0, _ := ret[0].(*models.TableOfContents)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTableOfContentsByBookID indicates an expected call of GetTableOfContentsByBookID.
func (mr *MockBookServiceMockRecorder) GetTableOfContentsByBookID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableOfContentsByBookID", reflect.TypeOf((*MockBookService)(nil).GetTableOfContentsByBookID), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockBookService) ListBooks(arg0 context.Context, arg1 models.RequestBook) ([]*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1)
	ret0, _ := ret[0].([]*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockBookServiceMockRecorder) ListBooks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockBookService)(nil).ListBooks), arg0, arg1)
}

// TogglePublic mocks base method.
func (m *MockBookService) TogglePublic(arg0 context.Context, arg1 models.ToggleBookRequest) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePublic", arg0, arg1)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TogglePublic indicates an expected call of TogglePublic.
func (mr *MockBookServiceMockRecorder) TogglePublic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePublic", reflect.TypeOf((*MockBookService)(nil).TogglePublic), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockBookService) UpdateBook(arg0 context.Context, arg1 string, arg2 models.UpdateBookRequest) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookServiceMockRecorder) UpdateBook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookService)(nil).UpdateBook), arg0, arg1, arg2)
}
