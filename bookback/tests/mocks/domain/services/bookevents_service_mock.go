// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/services (interfaces: BookEventsService)
//
// Generated by this command:
//
//	mockgen -destination=../../../tests/mocks/domain/services/bookevents_service_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/services BookEventsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBookEventsService is a mock of BookEventsService interface.
type MockBookEventsService struct {
	ctrl     *gomock.Controller
	recorder *MockBookEventsServiceMockRecorder
}

// MockBookEventsServiceMockRecorder is the mock recorder for MockBookEventsService.
type MockBookEventsServiceMockRecorder struct {
	mock *MockBookEventsService
}

// NewMockBookEventsService creates a new mock instance.
func NewMockBookEventsService(ctrl *gomock.Controller) *MockBookEventsService {
	mock := &MockBookEventsService{ctrl: ctrl}
	mock.recorder = &MockBookEventsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookEventsService) EXPECT() *MockBookEventsServiceMockRecorder {
	return m.recorder
}

// CreateBookEvent mocks base method.
func (m *MockBookEventsService) CreateBookEvent(arg0 context.Context, arg1 models.CreateBookEventRequest) (*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookEvent", arg0, arg1)
	ret0, _ := ret[0].(*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookEvent indicates an expected call of CreateBookEvent.
func (mr *MockBookEventsServiceMockRecorder) CreateBookEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookEvent", reflect.TypeOf((*MockBookEventsService)(nil).CreateBookEvent), arg0, arg1)
}

// DeleteBookEvent mocks base method.
func (m *MockBookEventsService) DeleteBookEvent(arg0 context.Context, arg1 string) (*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookEvent", arg0, arg1)
	ret0, _ := ret[0].(*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBookEvent indicates an expected call of DeleteBookEvent.
func (mr *MockBookEventsServiceMockRecorder) DeleteBookEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookEvent", reflect.TypeOf((*MockBookEventsService)(nil).DeleteBookEvent), arg0, arg1)
}

// GetBookEventByID mocks base method.
func (m *MockBookEventsService) GetBookEventByID(arg0 context.Context, arg1 string) (*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookEventByID", arg0, arg1)
	ret0, _ := ret[0].(*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookEventByID indicates an expected call of GetBookEventByID.
func (mr *MockBookEventsServiceMockRecorder) GetBookEventByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookEventByID", reflect.TypeOf((*MockBookEventsService)(nil).GetBookEventByID), arg0, arg1)
}

// GetBookEventsByBookID mocks base method.
func (m *MockBookEventsService) GetBookEventsByBookID(arg0 context.Context, arg1 string, arg2 models.RequestBookEvent) ([]*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookEventsByBookID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookEventsByBookID indicates an expected call of GetBookEventsByBookID.
func (mr *MockBookEventsServiceMockRecorder) GetBookEventsByBookID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookEventsByBookID", reflect.TypeOf((*MockBookEventsService)(nil).GetBookEventsByBookID), arg0, arg1, arg2)
}

// GetBookEventsByChapterID mocks base method.
func (m *MockBookEventsService) GetBookEventsByChapterID(arg0 context.Context, arg1 string, arg2 models.RequestBookEvent) ([]*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookEventsByChapterID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookEventsByChapterID indicates an expected call of GetBookEventsByChapterID.
func (mr *MockBookEventsServiceMockRecorder) GetBookEventsByChapterID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookEventsByChapterID", reflect.TypeOf((*MockBookEventsService)(nil).GetBookEventsByChapterID), arg0, arg1, arg2)
}

// GetBookEventsByPageID mocks base method.
func (m *MockBookEventsService) GetBookEventsByPageID(arg0 context.Context, arg1 string, arg2 models.RequestBookEvent) ([]*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookEventsByPageID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookEventsByPageID indicates an expected call of GetBookEventsByPageID.
func (mr *MockBookEventsServiceMockRecorder) GetBookEventsByPageID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookEventsByPageID", reflect.TypeOf((*MockBookEventsService)(nil).GetBookEventsByPageID), arg0, arg1, arg2)
}

// GetBookEventsByParagraphID mocks base method.
func (m *MockBookEventsService) GetBookEventsByParagraphID(arg0 context.Context, arg1 string, arg2 models.RequestBookEvent) ([]*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookEventsByParagraphID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookEventsByParagraphID indicates an expected call of GetBookEventsByParagraphID.
func (mr *MockBookEventsServiceMockRecorder) GetBookEventsByParagraphID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookEventsByParagraphID", reflect.TypeOf((*MockBookEventsService)(nil).GetBookEventsByParagraphID), arg0, arg1, arg2)
}

// TogglePublic mocks base method.
func (m *MockBookEventsService) TogglePublic(arg0 context.Context, arg1 models.ToggleBookEventRequest) (*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePublic", arg0, arg1)
	ret0, _ := ret[0].(*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TogglePublic indicates an expected call of TogglePublic.
func (mr *MockBookEventsServiceMockRecorder) TogglePublic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePublic", reflect.TypeOf((*MockBookEventsService)(nil).TogglePublic), arg0, arg1)
}

// UpdateBookEvent mocks base method.
func (m *MockBookEventsService) UpdateBookEvent(arg0 context.Context, arg1 string, arg2 models.UpdateBookEventRequest) (*models.BookEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.BookEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBookEvent indicates an expected call of UpdateBookEvent.
func (mr *MockBookEventsServiceMockRecorder) UpdateBookEvent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookEvent", reflect.TypeOf((*MockBookEventsService)(nil).UpdateBookEvent), arg0, arg1, arg2)
}
