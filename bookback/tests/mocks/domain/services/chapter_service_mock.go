// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/services (interfaces: ChapterService)
//
// Generated by this command:
//
//	mockgen -destination=../../../tests/mocks/domain/services/chapter_service_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/services ChapterService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockChapterService is a mock of ChapterService interface.
type MockChapterService struct {
	ctrl     *gomock.Controller
	recorder *MockChapterServiceMockRecorder
}

// MockChapterServiceMockRecorder is the mock recorder for MockChapterService.
type MockChapterServiceMockRecorder struct {
	mock *MockChapterService
}

// NewMockChapterService creates a new mock instance.
func NewMockChapterService(ctrl *gomock.Controller) *MockChapterService {
	mock := &MockChapterService{ctrl: ctrl}
	mock.recorder = &MockChapterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChapterService) EXPECT() *MockChapterServiceMockRecorder {
	return m.recorder
}

// CreateChapter mocks base method.
func (m *MockChapterService) CreateChapter(arg0 context.Context, arg1 models.CreateChapterRequest) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChapter", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChapter indicates an expected call of CreateChapter.
func (mr *MockChapterServiceMockRecorder) CreateChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChapter", reflect.TypeOf((*MockChapterService)(nil).CreateChapter), arg0, arg1)
}

// DeleteChapter mocks base method.
func (m *MockChapterService) DeleteChapter(arg0 context.Context, arg1 string) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChapter", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChapter indicates an expected call of DeleteChapter.
func (mr *MockChapterServiceMockRecorder) DeleteChapter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChapter", reflect.TypeOf((*MockChapterService)(nil).DeleteChapter), arg0, arg1)
}

// GetChapterByBookID mocks base method.
func (m *MockChapterService) GetChapterByBookID(arg0 context.Context, arg1 string, arg2 models.RequestChapter) ([]*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChapterByBookID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChapterByBookID indicates an expected call of GetChapterByBookID.
func (mr *MockChapterServiceMockRecorder) GetChapterByBookID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapterByBookID", reflect.TypeOf((*MockChapterService)(nil).GetChapterByBookID), arg0, arg1, arg2)
}

// GetChapterByID mocks base method.
func (m *MockChapterService) GetChapterByID(arg0 context.Context, arg1 string) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChapterByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChapterByID indicates an expected call of GetChapterByID.
func (mr *MockChapterServiceMockRecorder) GetChapterByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChapterByID", reflect.TypeOf((*MockChapterService)(nil).GetChapterByID), arg0, arg1)
}

// ListChapters mocks base method.
func (m *MockChapterService) ListChapters(arg0 context.Context, arg1 models.RequestChapter) ([]*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChapters", arg0, arg1)
	ret0, _ := ret[0].([]*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListChapters indicates an expected call of ListChapters.
func (mr *MockChapterServiceMockRecorder) ListChapters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChapters", reflect.TypeOf((*MockChapterService)(nil).ListChapters), arg0, arg1)
}

// UpdateChapter mocks base method.
func (m *MockChapterService) UpdateChapter(arg0 context.Context, arg1 string, arg2 models.UpdateChapterRequest) (*models.Chapter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChapter", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Chapter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChapter indicates an expected call of UpdateChapter.
func (mr *MockChapterServiceMockRecorder) UpdateChapter(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChapter", reflect.TypeOf((*MockChapterService)(nil).UpdateChapter), arg0, arg1, arg2)
}
