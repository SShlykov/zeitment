// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/services (interfaces: MapVariablesService)
//
// Generated by this command:
//
//	mockgen -destination=../../../tests/mocks/domain/services/mapvariables_service_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/services MapVariablesService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMapVariablesService is a mock of MapVariablesService interface.
type MockMapVariablesService struct {
	ctrl     *gomock.Controller
	recorder *MockMapVariablesServiceMockRecorder
}

// MockMapVariablesServiceMockRecorder is the mock recorder for MockMapVariablesService.
type MockMapVariablesServiceMockRecorder struct {
	mock *MockMapVariablesService
}

// NewMockMapVariablesService creates a new mock instance.
func NewMockMapVariablesService(ctrl *gomock.Controller) *MockMapVariablesService {
	mock := &MockMapVariablesService{ctrl: ctrl}
	mock.recorder = &MockMapVariablesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapVariablesService) EXPECT() *MockMapVariablesServiceMockRecorder {
	return m.recorder
}

// CreateMapVariable mocks base method.
func (m *MockMapVariablesService) CreateMapVariable(arg0 context.Context, arg1 models.CreateMapVariableRequest) (*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapVariable", arg0, arg1)
	ret0, _ := ret[0].(*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapVariable indicates an expected call of CreateMapVariable.
func (mr *MockMapVariablesServiceMockRecorder) CreateMapVariable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapVariable", reflect.TypeOf((*MockMapVariablesService)(nil).CreateMapVariable), arg0, arg1)
}

// DeleteMapVariable mocks base method.
func (m *MockMapVariablesService) DeleteMapVariable(arg0 context.Context, arg1 string) (*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapVariable", arg0, arg1)
	ret0, _ := ret[0].(*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMapVariable indicates an expected call of DeleteMapVariable.
func (mr *MockMapVariablesServiceMockRecorder) DeleteMapVariable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapVariable", reflect.TypeOf((*MockMapVariablesService)(nil).DeleteMapVariable), arg0, arg1)
}

// GetMapVariableByID mocks base method.
func (m *MockMapVariablesService) GetMapVariableByID(arg0 context.Context, arg1 string) (*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapVariableByID", arg0, arg1)
	ret0, _ := ret[0].(*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapVariableByID indicates an expected call of GetMapVariableByID.
func (mr *MockMapVariablesServiceMockRecorder) GetMapVariableByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapVariableByID", reflect.TypeOf((*MockMapVariablesService)(nil).GetMapVariableByID), arg0, arg1)
}

// GetMapVariablesByBookID mocks base method.
func (m *MockMapVariablesService) GetMapVariablesByBookID(arg0 context.Context, arg1 string, arg2 models.RequestMapVariable) ([]*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapVariablesByBookID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapVariablesByBookID indicates an expected call of GetMapVariablesByBookID.
func (mr *MockMapVariablesServiceMockRecorder) GetMapVariablesByBookID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapVariablesByBookID", reflect.TypeOf((*MockMapVariablesService)(nil).GetMapVariablesByBookID), arg0, arg1, arg2)
}

// GetMapVariablesByChapterID mocks base method.
func (m *MockMapVariablesService) GetMapVariablesByChapterID(arg0 context.Context, arg1 string, arg2 models.RequestMapVariable) ([]*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapVariablesByChapterID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapVariablesByChapterID indicates an expected call of GetMapVariablesByChapterID.
func (mr *MockMapVariablesServiceMockRecorder) GetMapVariablesByChapterID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapVariablesByChapterID", reflect.TypeOf((*MockMapVariablesService)(nil).GetMapVariablesByChapterID), arg0, arg1, arg2)
}

// GetMapVariablesByPageID mocks base method.
func (m *MockMapVariablesService) GetMapVariablesByPageID(arg0 context.Context, arg1 string, arg2 models.RequestMapVariable) ([]*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapVariablesByPageID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapVariablesByPageID indicates an expected call of GetMapVariablesByPageID.
func (mr *MockMapVariablesServiceMockRecorder) GetMapVariablesByPageID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapVariablesByPageID", reflect.TypeOf((*MockMapVariablesService)(nil).GetMapVariablesByPageID), arg0, arg1, arg2)
}

// GetMapVariablesByParagraphID mocks base method.
func (m *MockMapVariablesService) GetMapVariablesByParagraphID(arg0 context.Context, arg1 string, arg2 models.RequestMapVariable) ([]*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapVariablesByParagraphID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapVariablesByParagraphID indicates an expected call of GetMapVariablesByParagraphID.
func (mr *MockMapVariablesServiceMockRecorder) GetMapVariablesByParagraphID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapVariablesByParagraphID", reflect.TypeOf((*MockMapVariablesService)(nil).GetMapVariablesByParagraphID), arg0, arg1, arg2)
}

// UpdateMapVariable mocks base method.
func (m *MockMapVariablesService) UpdateMapVariable(arg0 context.Context, arg1 string, arg2 models.UpdateMapVariableRequest) (*models.MapVariable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapVariable", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MapVariable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapVariable indicates an expected call of UpdateMapVariable.
func (mr *MockMapVariablesServiceMockRecorder) UpdateMapVariable(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapVariable", reflect.TypeOf((*MockMapVariablesService)(nil).UpdateMapVariable), arg0, arg1, arg2)
}
