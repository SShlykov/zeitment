// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SShlykov/zeitment/bookback/internal/domain/services (interfaces: PageService)
//
// Generated by this command:
//
//	mockgen -destination=../../../tests/mocks/domain/services/page_service_mock.go -package=mocks github.com/SShlykov/zeitment/bookback/internal/domain/services PageService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPageService is a mock of PageService interface.
type MockPageService struct {
	ctrl     *gomock.Controller
	recorder *MockPageServiceMockRecorder
}

// MockPageServiceMockRecorder is the mock recorder for MockPageService.
type MockPageServiceMockRecorder struct {
	mock *MockPageService
}

// NewMockPageService creates a new mock instance.
func NewMockPageService(ctrl *gomock.Controller) *MockPageService {
	mock := &MockPageService{ctrl: ctrl}
	mock.recorder = &MockPageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageService) EXPECT() *MockPageServiceMockRecorder {
	return m.recorder
}

// CreatePage mocks base method.
func (m *MockPageService) CreatePage(arg0 context.Context, arg1 models.CreatePageRequest) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPageServiceMockRecorder) CreatePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPageService)(nil).CreatePage), arg0, arg1)
}

// DeletePage mocks base method.
func (m *MockPageService) DeletePage(arg0 context.Context, arg1 string) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePage", arg0, arg1)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePage indicates an expected call of DeletePage.
func (mr *MockPageServiceMockRecorder) DeletePage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePage", reflect.TypeOf((*MockPageService)(nil).DeletePage), arg0, arg1)
}

// GetPageByID mocks base method.
func (m *MockPageService) GetPageByID(arg0 context.Context, arg1 string) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPageByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageByID indicates an expected call of GetPageByID.
func (mr *MockPageServiceMockRecorder) GetPageByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPageByID", reflect.TypeOf((*MockPageService)(nil).GetPageByID), arg0, arg1)
}

// GetPagesByChapterID mocks base method.
func (m *MockPageService) GetPagesByChapterID(arg0 context.Context, arg1 string, arg2 models.RequestPage) ([]*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPagesByChapterID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPagesByChapterID indicates an expected call of GetPagesByChapterID.
func (mr *MockPageServiceMockRecorder) GetPagesByChapterID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesByChapterID", reflect.TypeOf((*MockPageService)(nil).GetPagesByChapterID), arg0, arg1, arg2)
}

// ListPages mocks base method.
func (m *MockPageService) ListPages(arg0 context.Context, arg1 models.RequestPage) ([]*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPages", arg0, arg1)
	ret0, _ := ret[0].([]*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPages indicates an expected call of ListPages.
func (mr *MockPageServiceMockRecorder) ListPages(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPages", reflect.TypeOf((*MockPageService)(nil).ListPages), arg0, arg1)
}

// TogglePublic mocks base method.
func (m *MockPageService) TogglePublic(arg0 context.Context, arg1 models.TogglePageRequest) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePublic", arg0, arg1)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TogglePublic indicates an expected call of TogglePublic.
func (mr *MockPageServiceMockRecorder) TogglePublic(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePublic", reflect.TypeOf((*MockPageService)(nil).TogglePublic), arg0, arg1)
}

// UpdatePage mocks base method.
func (m *MockPageService) UpdatePage(arg0 context.Context, arg1 string, arg2 models.UpdatePageRequest) (*models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePage indicates an expected call of UpdatePage.
func (mr *MockPageServiceMockRecorder) UpdatePage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePage", reflect.TypeOf((*MockPageService)(nil).UpdatePage), arg0, arg1, arg2)
}
