// Code generated by MockGen. DO NOT EDIT.
// Source: minio_usecase.go
//
// Generated by this command:
//
//	mockgen -source=minio_usecase.go -destination=../../../tests/mocks/usecase/minio_usecase_mock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	models "github.com/SShlykov/zeitment/bookback/internal/models"
	minio "github.com/minio/minio-go/v7"
	gomock "go.uber.org/mock/gomock"
)

// MockMinioUseCase is a mock of MinioUseCase interface.
type MockMinioUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMinioUseCaseMockRecorder
}

// MockMinioUseCaseMockRecorder is the mock recorder for MockMinioUseCase.
type MockMinioUseCaseMockRecorder struct {
	mock *MockMinioUseCase
}

// NewMockMinioUseCase creates a new mock instance.
func NewMockMinioUseCase(ctrl *gomock.Controller) *MockMinioUseCase {
	mock := &MockMinioUseCase{ctrl: ctrl}
	mock.recorder = &MockMinioUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioUseCase) EXPECT() *MockMinioUseCaseMockRecorder {
	return m.recorder
}

// CreateMinioObject mocks base method.
func (m *MockMinioUseCase) CreateMinioObject(ctx context.Context, request models.RequestMinioObject) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMinioObject", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMinioObject indicates an expected call of CreateMinioObject.
func (mr *MockMinioUseCaseMockRecorder) CreateMinioObject(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMinioObject", reflect.TypeOf((*MockMinioUseCase)(nil).CreateMinioObject), ctx, request)
}

// GetMinioObject mocks base method.
func (m *MockMinioUseCase) GetMinioObject(ctx context.Context, request models.RequestMinioObject) (*models.MinioResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinioObject", ctx, request)
	ret0, _ := ret[0].(*models.MinioResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinioObject indicates an expected call of GetMinioObject.
func (mr *MockMinioUseCaseMockRecorder) GetMinioObject(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinioObject", reflect.TypeOf((*MockMinioUseCase)(nil).GetMinioObject), ctx, request)
}

// MockMinioClient is a mock of MinioClient interface.
type MockMinioClient struct {
	ctrl     *gomock.Controller
	recorder *MockMinioClientMockRecorder
}

// MockMinioClientMockRecorder is the mock recorder for MockMinioClient.
type MockMinioClientMockRecorder struct {
	mock *MockMinioClient
}

// NewMockMinioClient creates a new mock instance.
func NewMockMinioClient(ctrl *gomock.Controller) *MockMinioClient {
	mock := &MockMinioClient{ctrl: ctrl}
	mock.recorder = &MockMinioClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMinioClient) EXPECT() *MockMinioClientMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockMinioClient) GetObject(ctx context.Context, bucketName, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockMinioClientMockRecorder) GetObject(ctx, bucketName, objectName, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockMinioClient)(nil).GetObject), ctx, bucketName, objectName, opts)
}
